drop policy "Enable read access for all users" on "public"."gen_usage";

drop policy "Enable update for users based on email" on "public"."gen_usage";

create table "public"."doc_meta" (
    "id" bigint generated by default as identity not null,
    "file_name" text not null,
    "user_id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null
);


alter table "public"."doc_meta" enable row level security;

CREATE UNIQUE INDEX doc_meta_pkey ON public.doc_meta USING btree (id);

alter table "public"."doc_meta" add constraint "doc_meta_pkey" PRIMARY KEY using index "doc_meta_pkey";

alter table "public"."doc_meta" add constraint "doc_meta_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."doc_meta" validate constraint "doc_meta_user_id_fkey";

grant delete on table "public"."doc_meta" to "anon";

grant insert on table "public"."doc_meta" to "anon";

grant references on table "public"."doc_meta" to "anon";

grant select on table "public"."doc_meta" to "anon";

grant trigger on table "public"."doc_meta" to "anon";

grant truncate on table "public"."doc_meta" to "anon";

grant update on table "public"."doc_meta" to "anon";

grant delete on table "public"."doc_meta" to "authenticated";

grant insert on table "public"."doc_meta" to "authenticated";

grant references on table "public"."doc_meta" to "authenticated";

grant select on table "public"."doc_meta" to "authenticated";

grant trigger on table "public"."doc_meta" to "authenticated";

grant truncate on table "public"."doc_meta" to "authenticated";

grant update on table "public"."doc_meta" to "authenticated";

grant delete on table "public"."doc_meta" to "service_role";

grant insert on table "public"."doc_meta" to "service_role";

grant references on table "public"."doc_meta" to "service_role";

grant select on table "public"."doc_meta" to "service_role";

grant trigger on table "public"."doc_meta" to "service_role";

grant truncate on table "public"."doc_meta" to "service_role";

grant update on table "public"."doc_meta" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."doc_meta"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all auth"
on "public"."doc_meta"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on id"
on "public"."doc_meta"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."gen_usage"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for authenticated user_id"
on "public"."gen_usage"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on user id"
on "public"."gen_usage"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));



