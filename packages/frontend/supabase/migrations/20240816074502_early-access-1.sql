create table "public"."gen_usage" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "is_generating" boolean not null default false,
    "tokens" double precision not null default '0'::double precision,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."gen_usage" enable row level security;

CREATE UNIQUE INDEX gen_usage_pkey ON public.gen_usage USING btree (id);

alter table "public"."gen_usage" add constraint "gen_usage_pkey" PRIMARY KEY using index "gen_usage_pkey";

alter table "public"."gen_usage" add constraint "gen_usage_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."gen_usage" validate constraint "gen_usage_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.gen_emit(user_id uuid)
 RETURNS void
 LANGUAGE plpgsql
AS $function$DECLARE
_is_generating bool;
BEGIN

SELECT is_generating FROM gen_usage
INTO _is_generating
WHERE gen_usage.user_id = gen_emit.user_id
FOR UPDATE;

IF _is_generating = TRUE THEN
  RAISE EXCEPTION 'Cannot gen now';
END IF;

UPDATE gen_usage
SET is_generating = TRUE
WHERE gen_usage.user_id = gen_emit.user_id;

END$function$
;

grant delete on table "public"."gen_usage" to "anon";

grant insert on table "public"."gen_usage" to "anon";

grant references on table "public"."gen_usage" to "anon";

grant select on table "public"."gen_usage" to "anon";

grant trigger on table "public"."gen_usage" to "anon";

grant truncate on table "public"."gen_usage" to "anon";

grant update on table "public"."gen_usage" to "anon";

grant delete on table "public"."gen_usage" to "authenticated";

grant insert on table "public"."gen_usage" to "authenticated";

grant references on table "public"."gen_usage" to "authenticated";

grant select on table "public"."gen_usage" to "authenticated";

grant trigger on table "public"."gen_usage" to "authenticated";

grant truncate on table "public"."gen_usage" to "authenticated";

grant update on table "public"."gen_usage" to "authenticated";

grant delete on table "public"."gen_usage" to "service_role";

grant insert on table "public"."gen_usage" to "service_role";

grant references on table "public"."gen_usage" to "service_role";

grant select on table "public"."gen_usage" to "service_role";

grant trigger on table "public"."gen_usage" to "service_role";

grant truncate on table "public"."gen_usage" to "service_role";

grant update on table "public"."gen_usage" to "service_role";

create policy "Enable read access for all users"
on "public"."gen_usage"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."gen_usage"
as permissive
for update
to public
using (true)
with check (true);



